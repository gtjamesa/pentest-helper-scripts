#!/usr/bin/env python3

import socket
import sys
from time import time
from multiprocessing import freeze_support, Lock
from queue import Queue
from threading import Thread


def get_users():
    # if len(sys.argv) == 1:
    #     print("Using enumerated users")
    #     return ['admin', 'eric', 'alice', 'pedro']
    # elif len(sys.argv) == 2:
    with open(sys.argv[2]) as f:
        return f.readlines()


def check(s, user):
    # s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # s.connect((sys.argv[1], 25))

    # s.recv(1024)

    s.send(f'VRFY {user}\r\n'.encode('UTF-8'))
    r = s.recv(1024)

    # s.send(f'EHLO {user}@thinc.local\r\n'.encode('UTF-8'))
    # s.recv(1024)

    # s.send(f'MAIL FROM:<{user}@thinc.local>\r\n'.encode('UTF-8'))
    # s.recv(1024)

    # s.send(f'RCPT TO:<{user}@thinc.local>\r\n'.encode('UTF-8'))
    # r = s.recv(1024)

    # s.close()

    with print_lock:
        # b'Unknown user' not in r and b'User unknown' not in r:
        if b'252 ' in r:
            print('{}:\t{}'.format(user, r.decode('UTF-8').strip()))


def open_conn():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((sys.argv[1], 25))
    # print(s.fileno(), s.getsockname(), s.getpeername())

    # Read banner
    s.recv(1024)
    return s


def check_worker():
    # Get username from queue and check via SMTP
    s = open_conn()

    while True:
        user = q.get()
        try:
            check(s=s, user=user)
            q.task_done()
        except ConnectionResetError:  # Target terminated socket, reconnect
            s = open_conn()
        # except:
        #     pass


def main():
    # Start threads
    for x in range(16):
        t = Thread(target=check_worker)
        t.daemon = True
        t.start()

    # Read users and add to queue
    for user in users:
        q.put(user.strip())

    q.join()


def finished(start_time):
    duration = round(time() - start_time)
    count = len(users)
    print(f'\nFinished enumerating {count} users in {duration}s')


if __name__ == "__main__":
    if len(sys.argv) < 3:
        print('Usage: %s TARGET_IP USERS_FILE' % sys.argv[0])
        exit()

    users = get_users()

    freeze_support()
    print_lock = Lock()
    q = Queue()
    start_time = time()

    try:
        main()
        finished(start_time=start_time)
    except KeyboardInterrupt:
        finished(start_time=start_time)
        pass
