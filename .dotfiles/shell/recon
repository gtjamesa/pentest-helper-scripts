#!/bin/bash

rustscan-rebuild() {
  TEMP_DIR=$(mktemp -d)
  LATEST_RELEASE=$(curl -s https://api.github.com/repos/RustScan/RustScan/releases/latest)
  TAR_DOWNLOAD=$(echo $LATEST_RELEASE | grep tarball_url | awk -F '"' '{print $4}')
  VERS=$(echo $LATEST_RELEASE | grep tag_name | awk -F '"' '{print $4}')

  echo "[*] Downloading rustscan:v$VERS from GitHub"
  echo "[*] $TAR_DOWNLOAD -> $TEMP_DIR/rustscan.tar.gz"
  wget --quiet "$TAR_DOWNLOAD" -O "$TEMP_DIR/rustscan.tar.gz"
  tar -xzf "$TEMP_DIR/rustscan.tar.gz" -C "$TEMP_DIR/" --strip-components=1
  rm -f "$TEMP_DIR/rustscan.tar.gz"

  echo "[*] Building rustscan/rustscan:$VERS from source"
  docker build -t "rustscan/rustscan:$VERS" "$TEMP_DIR/"
  docker tag "rustscan/rustscan:$VERS" "rustscan/rustscan:latest"

  docker image rm rust:alpine 2>/dev/null
  rm -rf "$TEMP_DIR"
}

rustscan() {
  HAS_IMG=$(docker image inspect rustscan/rustscan:latest 2>/dev/null)
  if [ "$HAS_IMG" == "[]" ] && rustscan-rebuild

  docker run -it --rm --name rustscan rustscan/rustscan:latest "$@" -- -Pn
}

s-autorecon() {
  sudo $(which autorecon) "$@"
}

wpscan() {
  if [[ -z "$WPSCAN_TOKEN" ]]; then
    echo "Please configure WPSCAN_TOKEN"
    exit 1
  fi

  HOST_PARAM=""
  WPSCAN_ARGS="$@"

  # Usage
  # wpscan host metapress.htb:10.129.66.72 --url http://metapress.htb
  if [ "$1" == "host" ]; then
    HOST_PARAM="--add-host $2"
    WPSCAN_ARGS="${@:3}"
  fi

  # Usage
  # WPSCAN_HOST=metapress.htb:10.129.66.72 wpscan --url http://metapress.htb
  if [ -n "$WPSCAN_HOST" ] && [ -z "$HOST_PARAM" ]; then
    HOST_PARAM="--add-host $WPSCAN_HOST"
  fi

  # Execute wpscan command
  # This method is required as Docker would not interpret the --add-host parameter
  bash -c "docker run "$HOST_PARAM" -it --rm wpscanteam/wpscan --api-token "$WPSCAN_TOKEN" "$WPSCAN_ARGS""
}

clean-hydra() {
  HYDRA_FILES=$(sudo find "$HOME" -type f -name hydra.restore -print0)
  FEROX_FILES=$(sudo find "$HOME" -type f -name 'ferox-*.state' -print0)

  echo -n $HYDRA_FILES | xargs -0 sudo du -sh
  echo -n $HYDRA_FILES | xargs -0 sudo rm -f
  echo -n $FEROX_FILES | xargs -0 sudo du -sh
  echo -n $FEROX_FILES | xargs -0 sudo rm -f
}

scrape-wordlist() {
  if [[ -z "$1" ]]; then
    echo 'Run a directory scan against the target, then re-run this script with the name of the file'
    echo '\033[1;34m$\033[0m \033[0;32mferoxbuster --depth 1 -x php txt html -Bern -u http://10.10.110.100 > ferox.txt\033[0m'
    return 1
  fi

  # Sanitize the list
  cat "$1" | grep 200 | grep -v "\.jpg\|\.jpeg\|\.png\|\.js\|\.css\|\.eot\|\.ttf\|\.otf\|\.svg\|\.gif\|\.woff\|\.woff2\|\.zip\|\s0c" | cut -d 'h' -f2-100 | sed 's/^/h/g' > temp_urls.txt

  # Run CeWL against each URL
  total_urls=$(wc -l temp_urls.txt | cut -d' ' -f 1)
  for url in $(cat temp_urls.txt); do echo $url && cewl --with-numbers -d 1 $url | grep -v 'digi.ninja' >> temp_cewl.txt; done
  rm -f temp_urls.txt
  cat temp_cewl.txt | sort -u >> cewl.txt && rm -f temp_cewl.txt
  total_words=$(wc -l cewl.txt | cut -d' ' -f 1)
  echo
  echo -e "\033[0;32mCreated $total_words line wordlist from $total_urls URLs\033[0m"
}