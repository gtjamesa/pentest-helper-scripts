#!/bin/bash

HELPERS_PATH=$(pwd | sed 's/\/\.dotfiles//')
DOTFILES_PATH="$HELPERS_PATH/.dotfiles"
CONFIG_PATH="$HOME/.config/helper-scripts"
SHARE_PATH="/usr/share"

config_ssh() {
  [ ! -f ~/.ssh/id_rsa ] && ssh-keygen -t rsa
}

install_config() {
  mkdir -p $CONFIG_PATH
  cat <<EOF > "$CONFIG_PATH/config"
#!/bin/bash

export HELPERS_PATH=$HELPERS_PATH
export DOTFILES_PATH="\$HELPERS_PATH/.dotfiles"
EOF

  # If the `~/.dotfiles` directory does not exist, we should symlink it to here
  [ ! -a "$HOME/.dotfiles" ] && ln -s "$DOTFILES_PATH" "$HOME/.dotfiles"
}

install_dotfiles() {
  # Add global gitignore
  symlink_file "$DOTFILES_PATH/shell/.global-gitignore" "$HOME/.global-gitignore"
  git config --global core.excludesfile "$HOME/.global-gitignore"

  # Add vimrc
  symlink_file "$DOTFILES_PATH/shell/.vimrc" "$HOME/.vimrc"
}

# Install ohmyzsh
# https://github.com/ohmyzsh/ohmyzsh
install_zsh() {
  echo "Installing ohmyzsh"
  echo "--------------------"
  rm -rf "$HOME/.oh-my-zsh/"
  backup_file ~/.zshrc

  # Run ohmyzsh installer
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
  
  # Install Themes
  ln -s "$DOTFILES_PATH/themes/james-custom.zsh-theme" "$HOME/.oh-my-zsh/themes/"

  # Install RC file
  ln -sf "$DOTFILES_PATH/shell/.zshrc" "$HOME/.zshrc"

  echo "Installing ZSH tools"
  echo "--------------------"

  if [[ ! -d "$SHARE_PATH/zsh-autosuggestions" ]]; then
    sudo git clone https://github.com/zsh-users/zsh-autosuggestions.git "$SHARE_PATH/zsh-autosuggestions"
  fi

  if [[ ! -d "$SHARE_PATH/zsh-syntax-highlighting" ]]; then
    sudo git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$SHARE_PATH/zsh-syntax-highlighting"
  fi
}

install_tmux() {
  echo "Installing tmux"
  echo "---------------"

  # Add tmux plugins
  mkdir -p "$HOME/.tmux/plugins"
  [ -d "$HOME/.tmux/plugins/tpm" ] && git clone https://github.com/tmux-plugins/tpm "$HOME/.tmux/plugins/tpm"

  # Add tmux config
  symlink_file "$DOTFILES_PATH/shell/.tmux.conf" "$HOME/.tmux.conf"
}

install_fzf() {
  echo "Installing fzf"
  echo "--------------"

  if [[ $(command -v fzf) ]]; then
    echo Skipping fzf
    return
  fi

  brew install fzf
  $(brew --prefix)/opt/fzf/install --key-bindings --completion --no-update-rc
}

# Install homebrew
# https://docs.brew.sh/Homebrew-on-Linux
install_homebrew() {
  if [[ $(command -v brew) ]]; then
    echo Skipping brew
    return
  fi

  rm -rf "$HOME/.linuxbrew"
  bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
}

install_pipx() {
    sudo apt install -y python3-venv
    python3 -m pip install --upgrade pip
    python3 -m pip install --user pipx
    python3 -m pipx ensurepath
}

install_software() {
    sudo apt update -y && sudo apt install -y \
        seclists curl dnsrecon enum4linux feroxbuster gobuster impacket-scripts nbtscan nikto nmap onesixtyone oscanner redis-tools smbclient smbmap snmp sslscan sipvicious tnscmd10g whatweb wkhtmltopdf \
        radare2 sshpass openjdk-11-jdk rlwrap

    # Install Python packages
    python3 -m pip install requests
    python3 -m pip install --upgrade pwntools
    python3 -m pip install name-that-hash

    # Install autorecon/bloodhound
    pipx install git+https://github.com/Tib3rius/AutoRecon.git
    pipx install git+https://github.com/fox-it/BloodHound.py.git

    # Update searchsploit
    sudo searchsploit -u

    # Install evil-winrm
    install_evilwinrm
}

# Install Evil WinRM with Remote Path Completion
# https://github.com/Hackplayers/evil-winrm#remote-path-completion
install_evilwinrm() {
  # Check your ruby version
  RUBY_VERSION=$(ruby --version | grep -Eo '[0-9]\.[0-9]\.[0-9]')
  RUBY_VERSION_SHORT=$(echo "$RUBY_VERSION" | grep -Eo '[0-9]\.[0-9]')
  RETURN_DIR=$(pwd)
  TEMP_DIR=$(mktemp -d)

  # Do not compile a new readline.so if the backup already exists
  # But we should still go ahead and install evil-winrm
  if [[ -f "/usr/lib/x86_64-linux-gnu/ruby/$RUBY_VERSION_SHORT.0/readline.so.bak" ]]; then
    sudo gem install evil-winrm
    return
  fi

  # Install needed package
  sudo apt install -y libreadline-dev

  # Download and extract Ruby source code
  wget "https://ftp.ruby-lang.org/pub/ruby/$RUBY_VERSION_SHORT/ruby-$RUBY_VERSION.tar.gz" -O "$TEMP_DIR/ruby-$RUBY_VERSION.tar.gz"
  tar -xzf "$TEMP_DIR/ruby-$RUBY_VERSION.tar.gz" -C "$TEMP_DIR"

  # Compile the readline extension:
  cd "$TEMP_DIR/ruby-$RUBY_VERSION/ext/readline"
  ruby ./extconf.rb
  make

  # Patch current version of the ruby readline extension:
  sudo cp "/usr/lib/x86_64-linux-gnu/ruby/$RUBY_VERSION_SHORT.0/readline.so" "/usr/lib/x86_64-linux-gnu/ruby/$RUBY_VERSION_SHORT.0/readline.so.bak"
  sudo cp -f readline.so "/usr/lib/x86_64-linux-gnu/ruby/$RUBY_VERSION_SHORT.0/readline.so"

  # Clean up
  cd "$RETURN_DIR"
  rm -rf "$TEMP_DIR"

  # Install evil-winrm
  sudo gem install evil-winrm
}

tweak_config() {
  # Set predictable responder challenge
  if ! grep -q '1122334455667788' /etc/responder/Responder.conf; then
    sudo sed -i 's/Challenge = Random/;Challenge = Random\nChallenge = 1122334455667788/' /etc/responder/Responder.conf
  fi

  mkdir -p "$HOME/.config/bloodhound"
  symlink_file "$DOTFILES_PATH/config-files/bloodhound/customqueries.json" "$HOME/.config/bloodhound/customqueries.json"

  # Enable Docker at startup
  sudo systemctl enable docker.service
  sudo systemctl start docker
}

install() {
    echo "Installing .dotfiles"
    echo "--------------------"
    config_ssh
    sudo -v

    # Source some files required for installation
    source "$DOTFILES_PATH/shell/misc"
    export PATH="$HOME/.local/bin:$HOME/.local:$PATH"

    # Install utils
    sudo apt update -y && sudo apt install -y \
        build-essential curl file git wget vim curl php jq zip unzip htop \
        libssl-dev libffi-dev build-essential gcc

    install_config
    install_homebrew
    install_pipx
    install_software
    install_zsh
    install_dotfiles
    install_tmux
    install_fzf
    tweak_config
}

install